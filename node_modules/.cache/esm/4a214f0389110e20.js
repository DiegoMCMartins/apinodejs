let server,jwt;_891‍.w("./setup/server",[["server",["server"],function(v){server=v}]]);_891‍.w("./setup/jwt",[["*",null,function(v){jwt=v}]]);


const hotelClients = require('./api/data/hotelClients.json');

const findById = (id) => {
  return new Promise((resolve, reject) => {
    for (const client of hotelClients.data) {
      if (client.id === id){
        resolve(client);
      }else {
        reject(null);
      }
    }
  })
}

const findOne = ({email, password}) => {
  return new Promise((resolve, reject) => {
    for (const client of hotelClients.data) {
      if (client.email === email && client.password === password) {
        resolve(client);
      } else {
        reject(null);
      }
    }
  })
}

const authMiddleware = async (req, res, next) => {
  const [, token] = req.headers.authorization.split(' ')
  _891‍.g.console.log(req.headers.authorization)
  try {
    const payload = await jwt.verify(token)
    const user = await findById(payload.user)

    if (!user) {
      return res.send(401)
    }

    req.auth = user

    next()
  } catch (error) {
    res.send(401, error)
  }
}

server.get('/login', async (req, res) => {
  const [, hash] = req.headers.authorization.split(' ')
  const [email, password] = Buffer.from(hash, 'base64')
    .toString()
    .split(':')

  try {
    const user = await findOne({ email, password })

    if (!user) {
      return res.send(401)
    }

    const token = jwt.sign({ user: user.id })

    res.send({ user, token })
  } catch (error) {
    res.send(error)
  }
})

server.get('/info', authMiddleware, async (req, res) => {
  const [, hash] = req.headers.authorization.split(' ')
  const [email, password] = Buffer.from(hash, 'base64')
    .toString()
    .split(':')

  try {
    const user = await findOne({ email, password })

    if (!user) {
      return res.send(401)
    }

    const token = jwt.sign({ user: user.id })

    res.send({ user, token })
  } catch (error) {
    res.send(error)
  }
})

server.get('/login', async (req, res) => {
  const [, hash] = req.headers.authorization.split(' ')
  const [email, password] = Buffer.from(hash, 'base64')
    .toString()
    .split(':')

  try {
    const user = await findOne({ email, password })

    if (!user) {
      return res.send(401)
    }

    const token = jwt.sign({ user: user.id })

    res.send({ user, token })
  } catch (error) {
    res.send(error)
  }
})

server.start();